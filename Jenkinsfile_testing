pipeline {
     parameters{
        string(name:'GIT_REPO_APP', 
               defaultValue:
               'https://github.com/losete/springboot-crud-demo.git')
        string(name:'APP_GIT_BRANCH',
               defaultValue: "master")
        string(name:'GIT_USER',
               defaultValue:"sebascm")
        string(name:'REPORT_MAIL',
               defaultValue:"sebastiancalvom@gmail.com")
        choice(name: 'AUTOMERGE_BRANCH',
                choices: ['Yes', 'No'],
                description: 'Automatic merge into \'dev\' of the branch above in case the build is successful')   
        string(name:'MYSQL_DB_PASSWORD',
               defaultValue:"rootpass")
        string(name:'MYSQL_DB_NAME',
               defaultValue:"springbootdb") 
    }
    agent { docker { image 'chusca/docker-and-maven-3.6.0-jdk-11:latest' } }
    stages {
        stage('Setup'){
            steps{
                step([ $class: 'CopyArtifact',
                    filter: 'project.tar.gz',
                    projectName: "spring-boot-crud-demo-Dev",
                    fingerprintArtifacts: true,
                    selector: upstream(fallbackToLastSuccessful: true) 
                ])
                sh 'tar -xvzf project.tar.gz'
                sh 'mkdir reports'
            }
        }
        stage('Spotbugs') {
            steps {
                sh 'mvn verify -Dmaven.test.failure.ignore=true > reports/bugs.txt'
            }
        }
        stage('Benchmark') {
            steps {
                script {
                    try {
                        timeout(time: 10, unit: 'MINUTES') {
                            sh 'mvn package  -Dmaven.test.failure.ignore=true '
                            sh 'java -jar benchmarks/target/benchmarks.jar > reports/benchmarks.txt'
                        }
                    } catch (err) {
                        // This try catch prevents Jenkins from setting currentBuild to
                        // ABORTED in case of benchmark failure
                        writeFile(file: "reports/benchmark_report.txt",
                                text: "Benchmarks are too slow", encoding: "UTF-8")
                    }
                }
            }
        }
        stage('Spring-boot:run') {
            steps {
                script {
                    try {
                        sh "docker run --name mysql-${BUILD_ID}  -e MYSQL_ROOT_PASSWORD=${MYSQL_DB_PASSWORD} -e MYSQL_DATABASE=${MYSQL_DB_NAME} -d mysql"
                        sh 'mvn spring-boot:run'
                    } catch (Exception e) {
                        sh 'Handle the exception!'
                    } finally {
                        sh "docker stop mysql-${BUILD_ID}"
                        sh "docker rm myqsl-${BUILD_ID}"
                    }
                }
            }
        }
    }
    post {
        always {
            sh 'tar -cvzf reports.tar.gz reports/'
            archiveArtifacts 'reports.tar.gz'
            emailext (attachmentsPattern: 'reports.tar.gz',
                body: "Workflow result on ${currentBuild.currentResult}, check attached artifacts for further information",
                subject: "Jenkins Build ${currentBuild.currentResult} on Job ${env.JOB_NAME}",
                from: 'notificaciones.torusnewies@gmail.com',
                replyTo: '',
                to: "${params.REPORT_MAIL}"
            )
        }
        failure {
            archiveArtifacts artifacts: 'reports.tar.gz', fingerprint: true
        }
        cleanup{
            cleanWs()
        }
    }
}
